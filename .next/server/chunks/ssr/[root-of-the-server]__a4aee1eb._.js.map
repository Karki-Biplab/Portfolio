{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///D:/project/src/app/blog/%5Bslug%5D/page.jsx"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nimport { marked } from 'marked';\r\nimport Link from 'next/link';\r\nimport { notFound } from 'next/navigation';\r\nimport './blog-post.css'; // Import the CSS file\r\n\r\n// Function to get all blog post slugs for static generation\r\nexport async function generateStaticParams() {\r\n  const blogDir = path.join(process.cwd(), 'src/app/blog/_content');\r\n  \r\n  // Check if directory exists\r\n  if (!fs.existsSync(blogDir)) {\r\n    console.warn('Blog content directory not found:', blogDir);\r\n    return [];\r\n  }\r\n  \r\n  const files = fs.readdirSync(blogDir);\r\n  \r\n  const params = files\r\n    .filter(filename => filename.endsWith('.md'))\r\n    .map(filename => {\r\n      const filePath = path.join(blogDir, filename);    \r\n      const fileContents = fs.readFileSync(filePath, 'utf8');\r\n      \r\n      try {\r\n        const { data } = matter(fileContents);\r\n        \r\n        // Use slug from frontmatter if available, otherwise use filename\r\n        const slug = data.slug || filename.replace('.md', '');\r\n        \r\n        console.log('Generated slug:', slug, 'from file:', filename); // Debug log\r\n        \r\n        return {\r\n          slug: slug,\r\n        };\r\n      } catch (error) {\r\n        console.error(`Error parsing ${filename}:`, error);\r\n        return {\r\n          slug: filename.replace('.md', ''),\r\n        };\r\n      }\r\n    });\r\n    \r\n  console.log('All generated params:', params); // Debug log\r\n  return params;\r\n}\r\n\r\n// Function to generate metadata for each blog post\r\nexport async function generateMetadata({ params }) {\r\n  const { slug } = params;\r\n  \r\n  const post = getPostBySlug(slug);\r\n  \r\n  if (!post) {\r\n    return {\r\n      title: 'Post Not Found',\r\n      description: 'The requested blog post could not be found',\r\n    };\r\n  }\r\n  \r\n  return {\r\n    title: `${post.title} | My Blog`,\r\n    description: post.description,\r\n    openGraph: {\r\n      title: post.title,\r\n      description: post.description,\r\n      type: 'article',\r\n      publishedTime: post.date,\r\n      url: `/blog/${slug}`,\r\n    },\r\n  };\r\n}\r\n\r\n// Function to get blog post by slug\r\nfunction getPostBySlug(slug) {\r\n  const blogDir = path.join(process.cwd(), 'src/app/blog/_content');\r\n  \r\n  // Check if directory exists\r\n  if (!fs.existsSync(blogDir)) {\r\n    console.error('Blog content directory not found:', blogDir);\r\n    return null;\r\n  }\r\n  \r\n  const files = fs.readdirSync(blogDir);\r\n  \r\n  console.log('Looking for slug:', slug); // Debug log\r\n  console.log('Available files:', files); // Debug log\r\n  \r\n  // First try to find a file with matching slug in frontmatter or filename\r\n  let postFile = null;\r\n  \r\n  for (const filename of files) {\r\n    if (!filename.endsWith('.md')) continue;\r\n    \r\n    const filePath = path.join(blogDir, filename);\r\n    const fileContents = fs.readFileSync(filePath, 'utf8');\r\n    \r\n    try {\r\n      const { data } = matter(fileContents);\r\n      \r\n      // Check both frontmatter slug and filename-based slug\r\n      const frontmatterSlug = data.slug;\r\n      const filenameSlug = filename.replace('.md', '');\r\n      \r\n      console.log(`File: ${filename}, frontmatter slug: ${frontmatterSlug}, filename slug: ${filenameSlug}`); // Debug log\r\n      \r\n      if (frontmatterSlug === slug || filenameSlug === slug) {\r\n        postFile = { path: filePath, contents: fileContents };\r\n        console.log('Found matching post:', filename); // Debug log\r\n        break;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error parsing frontmatter in ${filename}:`, error);\r\n      continue;\r\n    }\r\n  }\r\n  \r\n  if (!postFile) {\r\n    console.error('No matching post found for slug:', slug); // Debug log\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    // Parse the post content\r\n    const { data, content } = matter(postFile.contents);\r\n    const htmlContent = marked(content);\r\n    \r\n    return {\r\n      slug,\r\n      title: data.title || 'Untitled Post',\r\n      date: data.date || new Date().toISOString(),\r\n      description: data.description || 'No description provided',\r\n      author: data.author || 'Unknown Author',\r\n      tags: data.tags || [],\r\n      content: htmlContent,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error processing post content:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction formatDate(date) {\r\n  try {\r\n    return new Date(date).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    });\r\n  } catch (e) {\r\n    return 'Invalid Date';\r\n  }\r\n}\r\n\r\nexport default function BlogPost({ params }) {\r\n  const { slug } = params;\r\n  \r\n  console.log('BlogPost component - received slug:', slug); // Debug log\r\n  \r\n  const post = getPostBySlug(slug);\r\n  \r\n  if (!post) {\r\n    console.log('Post not found, calling notFound()'); // Debug log\r\n    notFound(); // This will show the 404 page\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      {/* Reading progress indicator */}\r\n      <div className=\"reading-progress\">\r\n      <div className=\"reading-progress-bar\" id=\"reading-progress-bar\"></div>\r\n      </div>\r\n      \r\n      <div className=\"blog-post-container\">\r\n        <header className=\"blog-post-header\">\r\n          <Link \r\n            href=\"/blog\"\r\n            className=\"back-link\"\r\n          >\r\n            ← Back to Blog\r\n          </Link>\r\n          \r\n          <h1 className=\"blog-title\">{post.title}</h1>\r\n          \r\n          <div className=\"blog-meta\">\r\n            <span>By {post.author}</span>\r\n            <span>•</span>\r\n            <time dateTime={post.date}>{formatDate(post.date)}</time>\r\n          </div>\r\n          \r\n          {post.tags && post.tags.length > 0 && (\r\n            <div className=\"blog-tags\">\r\n              {post.tags.map((tag, index) => (\r\n                <span key={index} className=\"blog-tag\">\r\n                  {tag}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </header>\r\n        \r\n        <article className=\"blog-content\">\r\n          <div dangerouslySetInnerHTML={{ __html: post.content }} />\r\n        </article>\r\n      </div>\r\n      \r\n      {/* Reading progress script */}\r\n      <script dangerouslySetInnerHTML={{\r\n        __html: `\r\n          document.addEventListener('DOMContentLoaded', function() {\r\n            const progressBar = document.getElementById('reading-progress-bar');\r\n            const article = document.querySelector('.blog-content');\r\n            \r\n            if (progressBar && article) {\r\n              function updateProgress() {\r\n                const articleTop = article.offsetTop;\r\n                const articleHeight = article.offsetHeight;\r\n                const windowHeight = window.innerHeight;\r\n                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n                \r\n                const articleBottom = articleTop + articleHeight;\r\n                const windowBottom = scrollTop + windowHeight;\r\n                \r\n                let progress = 0;\r\n                if (scrollTop > articleTop) {\r\n                  progress = Math.min(100, ((windowBottom - articleTop) / articleHeight) * 100);\r\n                }\r\n                \r\n                progressBar.style.width = progress + '%';\r\n              }\r\n              \r\n              window.addEventListener('scroll', updateProgress);\r\n              window.addEventListener('resize', updateProgress);\r\n              updateProgress();\r\n            }\r\n          });\r\n        `\r\n      }} />\r\n    </>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}